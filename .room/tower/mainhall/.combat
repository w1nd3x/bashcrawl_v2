#!/bin/bash
#
# If you are reading this, you have wandered out of bounds
# and are reading the code that drives the game.
#
#                    Congratulations!
#
# Learning Linux is all about curiosity, so read this code and see
# if you can figure out what it does.
#
# When you're ready to continue playing the game, though, stick to
# the scrolls. If you're stuck, ask your instructor.
# We're happy to provide hints.
#

gameover() {
    printf "\nYou have been defeated.\n\n"
    COINS=$(awk '/Purse:/ { print $2 }' ~/.stats)
    if [ $COINS -gt 5 ]; then
        let COINS=COINS-5
        printf "You lost 5 coins in the flight\n"
        sed "s/Purse:.*/Purse: $COINS/" ~/.stats > ~/.stats.tmp && mv ~/.stats.tmp ~/.stats
    fi
    MAX_HP=$(awk '/HP:/ { print $4 }' ~/.stats)
    sed "s/HP: .*/HP: 1 \/ $(echo $MAX_HP)/" ~/.stats > ~/.stats.tmp && mv ~/.stats.tmp ~/.stats
    printf "\nYou've lost five coins and you only have 1 HP. You should\nconsider going to get a drink before you continue your adventure.\n\n"

}

# This is the function that initiates combat (might want 
# a better name).
# 
# $1: Player to-hit
# $2: Enemy to-hit
# $3: Enemy HP
# $4: Enemy Atk
# @return: 0 if fled, 1 if victorious
#
roll() {
    HP=$(awk '/HP:/ { print $2 }' ~/.stats)    
    ENEMYHP=$3
    TOHIT=$1
    if grep  -q -o 'blessing' ~/.stats; then
        let TOHIT=TOHIT+2
    fi
    printf "You have $HP HP\n"
    if grep  -q -o 'spectacles' ~/.stats; then
        printf "Your opponent has $ENEMYHP HP\n"
    fi
    printf "Would you like to attack?  y/n  "
    read RESP
    if [ "$RESP" = "y" -o "$RESP" = "Y" ];then
        let "NUM = $RANDOM % 20"
        let NUM=NUM+$TOHIT
        let "MONSTER = $RANDOM % 20"
        let MONSTER=MONSTER+$2
        echo "Your opponent rolled " $MONSTER
        echo "You rolled " $NUM
        resolve $1 $2 $ENEMYHP $4
        return $?
    else   
        printf "You turn and run!\n"
        return 0
    fi
}

get_secrets() {
    input="/room/tower/mainhall/.secrets.txt"
    secretArray=()
    while read -r line
    do
	secretArray+=("$line")
    done < "$input"
    index=$(expr $1 + 1337)
    index=$(expr $index - 64017)
    index=$(expr $index % ${#secretArray[@]})
    echo "${secretArray[$index]}"
}


resolve() {
    HP=$(awk '/HP:/ { print $2 }' ~/.stats)   
    export ATK=1
    export DEF=0
    export ENEMYHP=$3
    if grep  -q -o 'frying pan' ~/.stats; then
        ATK=5
    elif grep -q -o 'seasoned pan' ~/.stats; then
        ATK=7
    elif grep -q -o 'enchanted pan' ~/.stats; then
        ATK=10
    elif grep -q -o 'flaming pan' ~/.stats; then
        ATK=12
    elif grep -q -o 'nuclear pan' ~/.stats; then
        ATK=1337
    else
        printf "You do not have a weapon!\n\n"
        printf "Your attacks will be less effective.\n"
    fi
    if grep -q -o 'armor' ~/.stats; then
        DEF=2
    fi
    if [[ $MONSTER -eq $NUM ]]; then
        printf "You each parry one another's attacks.  Roll again...\n"
	    roll $@
        return $?
    fi
    
    if [[ $MONSTER -lt $NUM ]]; then
        printf "BAM! You got solid contact!!!\n\n"
        let ENEMYHP=ENEMYHP-$ATK
        if [ "$ENEMYHP" -le 0 ]; then
            #printf "It doesn't look like they're getting back up...\n"
            return 1
        fi
        roll $1 $2 $ENEMYHP $4

    else
        let DAMAGE=$4-$DEF
        printf "The enemy deflects your attack\n\nYou take $DAMAGE points damage.\n"
        let HP=HP-$DAMAGE
        sed "s/HP: .*\//HP: $(echo $HP) \//" ~/.stats > ~/.stats.tmp && mv ~/.stats.tmp ~/.stats
        if [ "$HP" -le 0 ]; then
            printf "You have been defeated.\n\n"
            gameover
            return 0
        fi
	    roll $@
        return $?
    fi
}

# 
# $1: The number of coins to add
addCoins() {
    COINS=$(awk '/Purse:/ { print $2 }' ~/.stats)
    let COINS=COINS+$1
    sed "s/Purse:.*/Purse: $COINS/" ~/.stats > ~/.stats.tmp && mv ~/.stats.tmp ~/.stats
}

# 
# $1: the treasure you're adding
# $2: any flavor text you want to add
addTreasure() {
cat << EOF > treasure
#!/bin/bash
#
# If you are reading this, you have wandered out of bounds
# and are reading the code that drives the game.
#
#                    Congratulations!
#
# Learning Linux is all about curiosity, so read this code and see
# if you can figure out what it does.
#
# When you're ready to continue playing the game, though, stick to
# the scrolls. If you're stuck, ask your instructor.
# We're happy to provide hints.
#
if ! grep -o "$1" ~/.stats &>/dev/null; then
    cat <<eof
You found a **$1**!!

$2

You can always check your wealth with this command:

cat ~/.stats

eof
    mv treasure .treasure
    sed "s/Inventory:/Inventory: $1,/; s/,\$//" ~/.stats > ~/.stats.tmp && mv ~/.stats.tmp ~/.stats
    NUM=\$(awk '/Treasure:/ { print \$2 }' ~/.progress)
    let NUM=NUM+1
    sed "s/Treasure: .*\//Treasure: \$(echo \$NUM) \//" ~/.progress > ~/.progress.tmp && mv ~/.progress.tmp ~/.progress
else
    echo "This treasure has already been taken."
fi

EOF
chmod +x treasure
}
