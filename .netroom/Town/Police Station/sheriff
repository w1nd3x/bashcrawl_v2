#!/bin/bash
#
# If you are reading this, you have wandered out of bounds
# and are reading the code that drives the game.
#
#                    Congratulations!
#
# Learning Linux is all about curiosity, so read this code and see
# if you can figure out what it does.
#
# When you're ready to continue playing the game, though, stick to
# the scrolls. If you're stuck, ask your instructor.
# We're happy to provide hints.
#


source ~/.phrases
ONE=1
TWO=2
MYNS="town1"
MYIP="10.0.130.173"
BADIP="10.10.130.173"
MYGATEWAY="10.0.130.1"
TEST="10.0.140.42"
# $1: Namespace for the setup
# $2: IP Address for the setup
# $3: Bad IP, if there is one
# $4: Gateway Address
# $5: Location
# $6: Greeting, otherwise empty
generic_setup "$MYNS" "$MYIP" "$BADIP" "$MYGATEWAY" "Town" "$(sheriff_greeting)"
if [ -f .done ]; then
    if ! [ -f .task_done ]; then
        if ! [ -f .first ]; then
            station_next_task
            touch .first
        else
            printf "\nIs there some random backchannel on that computer? (y / n) "
            read RESP
            if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
                nc -w1 -v -n 10.0.140.84 10000-20000 1> /dev/null 2>.out.tmp
                PORT=$(grep "succeeded" .out.tmp | cut -d ' ' -f 4)
                rm .out.tmp
                printf "Great, what port is it on: "
                read RESP
                if [ "$RESP" = "$PORT" ]; then
                    printf "Excellent!! And what time are they planning their next attack? "
                    read RESP
                    if [ "$RESP" = "$ANSWER" ]; then
                        station_nc_success
                        touch .task_done
                        CHECKPOINT="$(get_secrets 56)_$(get_secrets 57)"
                        sed "s/Town1Task/$CHECKPOINT/" ~/status > ~/status.tmp && mv ~/status.tmp ~/status
                        chmod +x ~/status
                    else
                        printf "You may want to connect to that port and read what's going on one more time.\n\n"
                    fi
                else
                    station_nc_failure
                    prompt_for_hint
                    read RESP
                    if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
                        station_nc_hint
                    else
                        printf "Okay, if you're sure.\n\n"
                    fi
                fi
            else
                prompt_for_hint
                read RESP
                if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
                    station_nc_hint
                else
                    printf "Okay, if you're sure.\n\n"
                fi
            fi    
        fi
    else
        complete
    fi
fi

