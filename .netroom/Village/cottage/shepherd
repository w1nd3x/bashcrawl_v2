#!/bin/bash
#
# If you are reading this, you have wandered out of bounds
# and are reading the code that drives the game.
#
#                    Congratulations!
#
# Learning Linux is all about curiosity, so read this code and see
# if you can figure out what it does.
#
# When you're ready to continue playing the game, though, stick to
# the scrolls. If you're stuck, ask your instructor.
# We're happy to provide hints.
#

greeting() {
    cat << EOF

Look I know we've had our differences of opinion, but I really need access to 
the network again so I can meet with my conspirat... support group.  Can you 
really deny an old lady that?

EOF
    return
}

connected() {
cat << EOF

Thanks for doing this.  I really appreciate you looking beyond our past 
differences.

My computer is supposed to be at 10.0.110.169.  I thought I had it set up, but 
it just won't connect.

EOF
    return
}

prompt_for_hint() {
    cat << EOF

Did you need some help?

You can check out this manual if you'd like.  (y/n)

EOF
}

no_hint() {
    cat << EOF

If you're sure, but I'm supposed to have a meeting soon... I mean no pressure.

EOF
    return
}

ip_set() {

    cat << EOF

Oh, I guess I had the wrong address.  Well you know I got pretty close.  Do you
know if I can get to the city router?  

Most of the people I need to communicate with are in other parts of the 
kingdom.

EOF
    return
}

ping_success() {
    cat << EOF

Well thank goodness.  I was worried you wouldn't be able to get me connected.

Now can you make sure I can get to the test computer?  It's at 10.0.140.42.

EOF
    return
}

ping_hint() {
    cat << EOF

Hint:
You should run the command 'ping -c3 10.0.140.42'

EOF
    return
}

cottage_routed() {
    cat << EOF

Now that you've fixed up my connection there's a thing I need to connect to on 
port XX at XX.XX.XX.XX.  Think you can help me out.

EOF
    return
}

wrong_connection() {
    cat << EOF

It looks like you're connected to one of the other computers in the kingdom.

EOF
    return
}

complete() {
    cat << EOF

Well it looks like you've fixed everything here.

EOF
    return
}


NS=$(command ip netns identify)
if [ -f .done ]; then
    complete
elif ! [ -f ~/.router2 ]; then
    router2_setup
elif [ -z "${NS}" ]; then
    greeting
else
    if [ "$NS" = "village2" ]; then
        ADDR_SET=$(ip a | grep -o "10.0.120.111/24 scope global village20")
        PING=$(cat ~/.bash_history | grep -o "ping .* 10.0.120.1")
        PING2=$(cat ~/.bash_history | grep -o "ping .* 10.0.140.42")
        ROUTE_SET=$(ip route | grep -o "default via 10.0.120.1 dev village20")

MYNS="village2"
MYIP="10.0.130.111"
MYGATEWAY="10.0.120.1"
TEST="10.0.140.42"
NS=$(command ip netns identify)
if ! [ -f ~/.router1 ]; then
    router1_setup
elif ! [ -f .done ]; then
    if [ -z "${NS}" ]; then
        greeting
    elif [ "$NS" = "$MYNS" ]; then
        ADDR_SET=$(ip a | grep -o "$MYIP/24 scope global ${MYNS}0")
        PING=$(cat ~/.bash_history | grep -o "ping .* $MYGATEWAY")
        PING2=$(cat ~/.bash_history | grep -o "ping .* $TEST")
        ROUTE_SET=$(ip route | grep -o "default via $MYGATEWAY dev ${MYNS}0")
        IP_UP=$(command ip netns exec $MYNS ping -c1 -W1 $MYIP | grep -o from 2> /dev/null)
        ROUTE_UP=$(command ip netns exec test ping -c1 -W1 $TEST | grep -o from 2> /dev/null)
        if [ -z "$ADDR_SET" ] || [ -z "$IP_UP" ]; then
            connected
            if [ -f .first ]; then
                prompt_for_hint
                if [ "$RESP" = "y" -o "$RESP" = "Y" ];then
                    if [ -z "$ADDR_SET" ]; then ip_add_hint; fi
                    if [ -z "$IP_UP" ]; then ip_del_hint; fi
                else
                    no_hint
                fi
            else
                touch .first
            fi
        elif [ -z "$ROUTE_SET" ] || [ -z "$ROUTE_UP" ]; then
            ip_set
            if [ -f .second ]; then
                prompt_for_hint
                if [ "$RESP" = "y" -o "$RESP" = "Y" ];then
                    if [ -z "$ROUTE_SET" ]; then route_add_hint; fi
                    if [ -z "$ROUTE_UP" ]; then route_del_hint; fi
                else
                    no_hint
                fi
            else
                touch .second
            fi
            workshop_routed
            touch .done
            rm .ping
            rm .connected
            # edit .start.sh to save progress
        else
            workshop_routed
            touch .done
            rm .first .second
            # edit .start.sh to save progress
        fi
    else
        wrong_connection
    fi
elif ! [ -f .task_done ]; then
    if ! [ -f .repeat ]; then
        workshop_routed
        touch .repeat
    else
        SECRET=$(nc XX.XX.XX.XX XXXX)
        printf "\nDid you get that info for me? (y / n) "
        read RESP
        if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
            printf "Great, what is it: "
            read RESP
            if [ "$RESP" = "$SECRET" ]; then
                nc_success
                touch .task_done
                rm .repeat
            else
                nc_failure
                nc_hint
            fi
        else
            nc_hint
        fi
    fi
else
    complete
fi