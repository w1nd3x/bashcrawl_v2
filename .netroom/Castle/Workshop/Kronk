#!/bin/bash
#
# If you are reading this, you have wandered out of bounds
# and are reading the code that drives the game.
#
#                    Congratulations!
#
# Learning Linux is all about curiosity, so read this code and see
# if you can figure out what it does.
#
# When you're ready to continue playing the game, though, stick to
# the scrolls. If you're stuck, ask your instructor.
# We're happy to provide hints.
#

source ~/.phrases
ONE=1
TWO=2
MYNS="castle1"
MYIP="10.0.110.196"
BADIP="10.110.0.196"
MYGATEWAY="10.0.110.1"
TEST="10.0.140.42"
# $1: Namespace for the setup
# $2: IP Address for the setup
# $3: Bad IP, if there is one
# $4: Gateway Address
# $5: Location
# $6: Greeting, otherwise empty
generic_setup "$MYNS" "$MYIP" "$BADIP" "$MYGATEWAY" "Castle" "$(Kronk_greeting)"
if [ -f .done ]; then
    if ! [ -f .task_done ]; then
        if ! [ -f .first ]; then
            workshop_next_task
            touch .first
        else
            PORT=$(ss -l | tr -s ' ' | tr ':' ' ' |  grep "0.0.0.0" | cut -d ' ' -f 6)
            printf "\nDid you figure out what port my server is on? (y / n) "
            read RESP
            if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
                printf "Great, what port is it: "
                read RESP
                if [ "$RESP" = "$PORT" ]; then
                    workshop_port_success
                    touch .task_done
                    CHECKPOINT="$(get_secrets 48)_$(get_secrets 49)"
                    sed "s/Castle1Task/$CHECKPOINT/" ~/status > ~/status.tmp && mv ~/status.tmp ~/status
                    chmod +x ~/status
                else
                    port_failure
                    port_hint
                fi
            else
                port_hint
            fi
        fi
    else
        complete
    fi
fi