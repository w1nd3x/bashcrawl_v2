#!/bin/bash
#
# If you are reading this, you have wandered out of bounds
# and are reading the code that drives the game.
#
#                    Congratulations!
#
# Learning Linux is all about curiosity, so read this code and see
# if you can figure out what it does.
#
# When you're ready to continue playing the game, though, stick to
# the scrolls. If you're stuck, ask your instructor.
# We're happy to provide hints.
#

greeting() {
    cat << EOF

It looks like things are going pretty well for your new company.  I hope you
manage to start turning a profit, even in our heyday we didn't.  Anywho, I'm 
hoping you can work some of your network magic and get this Factory Donut all
connected.

You can go ahead and 'connect' right up.

EOF
    return
}

connected() {
cat << EOF

You connected?!?!  You're already doing this network thing better than we did.  

The ip address here is supposed to be at 10.0.100.36.  

Could you set that up?

EOF
    return
}

prompt_for_hint() {
    cat << EOF

Did you need some help?

I think I kind of remember some network commands.  (y/n)

EOF
}

connected_hint() {
    cat << EOF

Hint:
You should run the command 'ip address add 10.0.100.36/24 dev city20'.

If you set an incorrect ip address you can run: 
    'ip address del <incorrect ip address> dev city20'

EOF
    return
}

no_hint() {
    cat << EOF

No problem, let me know if you need anything.

EOF
    return
}

ip_set() {

    cat << EOF

Hurray.  Now you should be able to make sure my connection is good.  Try to 
ping the city's router.  You can use the ping command:  
    'ping -c3 10.0.100.1'  

The -c argument sets the count for how many ping's you will send.  If you don't
specify a count, ping will run forever and to shut it down you'll need to press
ctrl+c.

EOF
    return
}

ping_success() {
    cat << EOF

Great we can get to the router.  Now see if you can reach the test network.  
Someone at the IT company set it up so we could make sure our connections were 
good.  It's IP address is 10.0.140.42.

EOF
    return
}

ping_hint() {
    cat << EOF

Hint:
You should run the command 'ping -c3 10.0.140.42'

EOF
    return
}

ping_aftermath() {
    cat << EOF

Oh no!! It's not working.  You should go talk to the technician to figure this 
out.

EOF
    return
}

wrong_connection() {
    cat << EOF

It looks like you're connected to one of the other computers in the kingdom.

EOF
}

complete() {
    cat << EOF

Amazing!!!  I'm back on the network!!  Thank you for your help!

EOF
    return
}

do_the_intro() {
    cat << EOF

You should probably go back to The Royal Byte and talk to the technician.

EOF
}


NS=$(command ip netns identify)
if [ -f .done ]; then
    complete
elif ! [ -f ~/.router0 ]; then
    do_the_intro
elif [ -z "${NS}" ]; then
    greeting
else
    if [ "$NS" = "city2" ]; then
        ADDR_SET=$(ip a | grep -o "10.0.100.36/24 scope global city20")
        PING=$(cat ~/.bash_history | grep -o "ping .* 10.0.100.1")
        PING2=$(cat ~/.bash_history | grep -o "ping .* 10.0.140.42")
        ROUTE_SET=$(ip route | grep -o "default via 10.0.100.1 dev city20")
        if ! [ -z "$ROUTE_SET" ]; then
            complete
            touch .done
            # edit .start.sh to save progress
            sed "s/#city2 //" /.start.sh > /.start.sh.tmp && mv /.start.sh.tmp /.start.sh
            if [ -f ../Big\ Bank/.done ]; then
                touch ~/.city
            fi
        elif ! [ -z "$PING2" ] && [ -f .ping ]; then
            ping_aftermath
        elif [ -f .ping ]; then
            prompt_for_hint
            read RESP
            if [ "$RESP" = "y" -o "$RESP" = "Y" ];then
                ping_hint
            else
                no_hint
            fi
        elif ! [ -z "$PING" ] && ! [ -z "$ADDR_SET" ]; then
            ping_success
            touch .ping
        elif ! [ -z "$ADDR_SET" ]; then
            ip_set
        elif [ -f .connected ]; then
            prompt_for_hint
            read RESP
            if [ "$RESP" = "y" -o "$RESP" = "Y" ];then
                connected_hint
            else
                no_hint
            fi
        elif ! [ -z "${NS}" ]; then
            connected
            touch .connected
        fi
    else
        wrong_connection
    fi
fi
