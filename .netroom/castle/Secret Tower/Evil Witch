#!/bin/bash
#
# If you are reading this, you have wandered out of bounds
# and are reading the code that drives the game.
#
#                    Congratulations!
#
# Learning Linux is all about curiosity, so read this code and see
# if you can figure out what it does.
#
# When you're ready to continue playing the game, though, stick to
# the scrolls. If you're stuck, ask your instructor.
# We're happy to provide hints.
#

greeting() {
    cat << EOF

Look I know we've had our differences of opinion, but I really need access to 
the network again so I can meet with my conspirat... support group.  Can you 
really deny an old lady that?

EOF
    return
}

connected() {
cat << EOF

Thanks for doing this.  I really appreciate you looking beyond our past 
differences.

My computer is supposed to be at 10.0.110.169.  I thought I had it set up, but 
it just won't connect.

EOF
    return
}

prompt_for_hint() {
    cat << EOF

Did you need some help?

You can check out this manual if you'd like.  (y/n)

EOF
}

no_hint() {
    cat << EOF

If you're sure, but I'm supposed to have a meeting soon... I mean no pressure.

EOF
    return
}

ip_set() {

    cat << EOF

Oh, I guess I had the wrong address.  Well you know I got pretty close.  Do you
know if I can get to the city router?  

Most of the people I need to communicate with are in other parts of the 
kingdom.

EOF
    return
}

ping_success() {
    cat << EOF

Well thank goodness.  I was worried you wouldn't be able to get me connected.

Now can you make sure I can get to the test computer?  It's at 10.0.140.42.

EOF
    return
}

ping_hint() {
    cat << EOF

Hint:
You should run the command 'ping -c3 10.0.140.42'

EOF
    return
}

tower_routed() {
    cat << EOF

Wow.  It all works?  That's kinda surprising.  Well I have a little server
program I downloaded off of gregslist.  I can't figure out what port other
people are supposed to connect over.  Could you check for me?

EOF
    return
}

wrong_connection() {
    cat << EOF

It looks like you're connected to one of the other computers in the kingdom.

EOF
    return
}

complete() {
    cat << EOF

Well it looks like you've fixed everything here.

EOF
    return
}

router1_setup() {
    cat << EOF

I don't think there's much you can do here until you set up the city router 
for our network.  Talk to the technician if you need help.

EOF
}

port_success() {
    cat << EOF

Let me check........

Excellent!  Now all my conspirat... friends will be able to connect.  I really 
appreciate the help.

EOF

}

port_failure() {
    cat << EOF

Let me check........

That doesn't seem to be the right port.  I can't connect to my server on it.

EOF
}

port_hint() {
    cat << EOF

Take a look at the 'ss' command.  If you are running a server on your computer
that program is using a socket to 'listen'.  See if there's a way to figure out
what sockets are listening on the computer you are connected to.

EOF

}

ping_aftermath() {
    cat << EOF

Well that doesn't seem to work.  It looks like you still need to set up a 
route on my network.

EOF
}

connected_hint() {

    cat << EOF

Remember you set the ip address on an interface using the ip address command.
The option you will usually need to add, but if an address is already there you
will need to use the delete option first to remove the old address.

The difference between running an add command and a delete command is just
swapping out add for delete or vice versa.

Ex: 
    'ip address add 143.150.12.20/24 dev eth0'
    'ip address delete 143.150.12.20/24 dev eth0

EOF
}


NS=$(command ip netns identify)
if ! [ -f ~/.router1 ]; then
    router1_setup
elif ! [ -f .done ]; then
    if [ -z "$NS" ]; then 
        greeting
    elif [ "$NS" = "castle2" ]; then
        ADDR_SET=$(ip a | grep -o "10.0.110.169/24 scope global castle20")
        PING=$(cat ~/.bash_history | grep -o "ping .* 10.0.110.1")
        PING2=$(cat ~/.bash_history | grep -o "ping .* 10.0.140.42")
        ROUTE_SET=$(ip route | grep -o "default via 10.0.110.1 dev castle20")
        if ! [ -z "$ROUTE_SET" ]; then
            tower_routed
            touch .done
            rm .ping
            rm .connected
            # edit .start.sh to save progress
        elif ! [ -z "$PING2" ] && [ -f .ping ]; then
            ping_aftermath
        elif [ -f .ping ]; then
            prompt_for_hint
            read RESP
            if [ "$RESP" = "y" -o "$RESP" = "Y" ];then
                ping_hint
            else
                no_hint
            fi
        elif ! [ -z "$PING" ] && ! [ -z "$ADDR_SET" ]; then
            ping_success
            touch .ping
        elif ! [ -z "$ADDR_SET" ]; then
            ip_set
        elif [ -f .connected ]; then
            prompt_for_hint
            read RESP
            if [ "$RESP" = "y" -o "$RESP" = "Y" ];then
                connected_hint
            else
                no_hint
            fi
        elif ! [ -z "${NS}" ]; then
            connected
            touch .connected
        fi
    else
        wrong_connection
    fi
elif ! [ -f .task_done ]; then
    if ! [ -f .repeat ]; then
        tower_routed
        touch .repeat
    else
        PORT=$(ss -l | tr -s ' ' | tr ':' ' ' |  grep "0.0.0.0" | cut -d ' ' -f 6)
        printf "\nDid you figure out what port my server is on? (y / n) "
        read RESP
        if [ "$RESP" = "y" ] || [ "$RESP" = "Y" ]; then
            printf "Great, what port is it: "
            read RESP
            if [ "$RESP" = "$PORT" ]; then
                port_success
                touch .task_done
                rm .repeat
            else
                port_failure
                port_hint
            fi
        else
            port_hint
        fi
    fi
else
    complete
fi
